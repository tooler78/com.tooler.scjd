===========================
1.	General
1.1 Package Structure
1.2 Application startup
1.3 Shutdown hook
1.4 Exception handling	

2.	Documentation
2.1	User Guide
2.2	JavaDoc
2.3	choices.txt

3.	GUI
3.1	Configuration Dialogs
3.2	MVC pattern
3.3	Business Service

4.	Data Implementation

5.	Locking

6.	Network
===========================

1.	General
---------------------------
As required, the DB interface has not been changed and is used exactly as was intended with the 
assignment. However, it has been reformatted and its JavaDoc information has been completed to make 
it easier to use and to be consistent with all other classes/interfaces produced in this application 
implementation.

In the delivered version of the implementation, all logging and testing code has been removed to 
make the code clearer and more concise. As a choice I decided that all issues/errors would be better
served to the user in a UI component (for example, an error message dialog). Although detailed 
logging can be very helpful when an issue occurs, a user may not be aware of the logging file 
without prior reading of a User Guide. This can lead to frustration with regard to "What am I doing 
wrong?" scenario. 

Throughout the course of the document i will refer to the abbreviated text of CRUD. THis term stands 
for Create, Read, Update, Delete. For the sake of brevity i will refer to the abbreviation 
explanation now and only now.

1.1 Package Structure

The following package breakdown was used to organize classes of common functionality. These classes 
and interfaces within each package are related in terms of the set of tasks they perform.

suncertify.application	
	Provides the classes necessary for starting and handling shutdown of the application as well as 
	service provider classes for interaction with our data objects.
suncertify.db	
	Provides the DB interface and its local data file implementation along with all exception 
	classes.
suncertify.db.lock	
	Provides the classes for the application's locking mechanism. The locking functionality is 
	required to protect data interaction from multiple client access concurrently.
suncertify.domain	
	Provides the classes for the domain objects and database schema definition of the application.  
suncertify.remote	
	Provides classes to provide network connectivity between the client and the server using RMI.
suncertify.ui	
	Provides all centralized GUI classes required by the UI components of either client or server 
	launched application.
suncertify.ui.client	
	Provides all client specific GUI classes required for this application to operate as either a 
	networked client or a non-networked client.
suncertify.ui.server	
	Provides all server specific GUI classes required for this application to operate as a server 
	application.

1.2 Application startup

As required by the assignment, the application supports the following start options:

	java -jar <path_and_filename> [<mode>]
	Where the mode flag must be either 
		"server", indicating the server program must run
		"alone", indicating standalone mode
		or left out entirely, in which case the network client and GUI must run.

The class LaunchApplication, in the package suncertify.application, is the executable main class and 
therefore, where this program starts execution. It has access to the command arguments given to the 
program when it was executed and will be responsible for the high-level organization of the 
program's launch. I have used an enum class called LaunchMode (in the same package) to validate the 
currently supported launch parameters. This should allow a clear view to the reader of what is 
supported but also the ability to make updates for any future command line argument additions.

In the case of the user passing in an invalid parameter or the incorrect number of parameters on the
command line during execution, then the LaunchApplication will display usage text to the user and 
terminate. User will then need to retry executing startup of the application again.

Assuming the parameters entered pass the validation checks on startup then the LaunchApplication 
class will proceed to start in the correct launch mode (client, server or standalone). At this point
the user will be requested to enter some configuration information required to complete startup. The 
information required will differ based on the launch mode. For this validation I created an abstract 
class called UserEntryPanel in the suncertify.ui package. This class is extended by three sub 
classes to represent each of the the different launch modes currently supported. The abstract class 
contains common abstract methods that will be required by all panels such as "add components" and 
"validate user entry" for example. The reason I chose this type of approach is that it allows for 
easy extension should another required launch mode need to be added in the future with no disruption 
to existing classes. Also in the case of classes using a SubClass of the 
suncertify.ui.UserEntryPanel, it allows for loose coupling of the given panel where a change from  
one SubClass panel to another should not result in any change in the calling class's use of the 
panel, i.e. calling class can still call aGivenPanel.validate(). 

During the panel composition, the text fields requiring user entry, will have suggested values, 
which are read from a configuration file called suncertify.properties, as specified in the original 
assignment or where the file is not existing (on initial startup for example), default values will 
be presented where applicable. Property fetching and persisting back out to the given configuration 
file will be controlled by ApplicationProperties in the suncertify.application package. This class 
is a Singleton as I want to have one and only one class handling this task. Since I know that we 
will always need an instance , I used eager initialization, which always creates an instance.

Finally depending on the mode, a table representing the list of database records is displayed to the 
user (if launched in either client mode) or details on startup success failure is displays to the 
user. Both client and server will make use of the MVC pattern which I will detail in a later 
chapter.

1.3 Shutdown hook

One of the first tasks during execution of the main class LaunchApplication, is to register a 
"Shutdown Hook". A shutdown hook is an initialized but unstarted thread and when the virtual machine 
begins its shutdown sequence it will start any registered shutdown hooks (not in any particular 
order) and let them run concurrently. My class GracefulShutdownHook is responsible for any tidy-up 
tasks that must be executed on the exit of the application. In the case of a "server" or 
"standalone" started application, then the data read up from the supported .db file now needs to be 
persisted back into the .db file (this is because of the choice I made with regard to my Data class 
implementation, but more on that in a later chapter). Also when the application mode is server then 
an attempt to unbind the registered RMI service exposed for client-server communication, will also 
be attempted at this point. If for any reason that an error is experienced in RMI unbind task then 
the exception is caught and silently ignored - this is because the server is about to be shutdown 
and the knock on effect of this type of error scenario is not important.

However in the case of the task of persisting modified data records back out to the .db file, then 
we need to alert the user to the issue encountered as this is a serious error.

In the case of the networked client launch mode no tidy up task is required currently. However if it 
is required then this class should be updated in the future.

1.4 Exception handling	

The following are the checked exceptions currently handled in the Application:
	CommunicationException
		Instances of this exception class are thrown, if a client cannot invoke an operation on a 
		server object because of a network error (e.g. java.rmi.RemoteException).
	DuplicateKeyException (exception required as part of the OCMJD suncertify.db.DB interface)
		If a specified record already exists with the same key.
	DatabaseException
		Instances of this exception class are thrown, if the database does not conform to the 
		specified database schema.
	RecordAlreadyBookedException
		Instances of this exception class are thrown if during an attempt to book a record it fails 
		to succeed as it has already been booked.
	RecordNotFoundException (exception required as part of the OCMJD suncertify.db.DB interface)
		Instances of this exception class are thrown by {@code DB} methods if a specified record 
		does not exist or is marked as deleted in the database file.
	
As was mentioned in the General chapter text above, I have elected to try and report all error's 
encountered directly to the user via a GUI component (namely a JDialog). Taking into account the 
possible choice of reporting errors encountered with more detail into a log, I felt that, as a user I 
would appreciate being able to see the error message in the current application interface I am 
using.


2.	Documentation
---------------------------
The following chapters contain some small detail around the documentation, as required by the 
original assignment specification received.

2.1	User Guide

For the user guide I decided to have the following chapter layout:
	Starting the application
	Configuration
	Server mode
	Client and stand-alone mode
	GUI Overview
	Trouble-Shooting

The first two chapters deal with how to execute the startup of the application in the differing 
modes along with the different configuration parameters required. The following two chapters detail 
the different modes that the application will behave in post configuration validation. GUI Overview 
will detail the layout of the GUI now that it is launched along with more detail on the use cases 
supported from the GUI (as required from the original assignment). The final chapter is a utility 
chapter to help the user to quickly solve any issue reported by the GUI. The GUI messages displayed 
within the UI components, when encountering an error, should be clear - however my idea was for each
of the error messages that are displayed through the GUI, a sub chapter in this section would help
to explain in detail what the issue is and how to resolve it. 

2.2	JavaDoc

As required in the original assignment, javadoc style comments are present for all elements of any 
public interface of each class. In the case where methods or variables are private, I have not used 
any javadoc comments. Instead I have tried to clearly name them in such a way as that it is clear 
what exactly each private method and/or variable are trying to represent. I chose this style of 
javadoc approach as I believe it to be a way of keeping the classes simple in their design and 
allows for good readability.

2.3	choices.txt

As required I have detailed, as best I can, what were the different decisions and design choices I 
made throughout the project, whether it be coding or documentation.


3.	GUI
---------------------------
3.1	Configuration Dialogs

If launched as a networked client or standalone, a JOptionPane is used to request the user to either
exit or proceed with the launch of the application. As part of the JOptionPsne displayed, the 
abstract class UserEntryPanel is used to capture the configuration information required for start-up.
This object oriented approach allows for loose coupling and future modification of required 
information without any re-working of the calling class using the UserEntryPanel class. 

When launched with server mode, a JFrame is used. The server performs in a different life-cycle than
the networked client/standalone mode. In client mode, once the user has acknowledged the positive 
action in the JOption Pane, the main GUI window is visible with a list of records from the .db file 
displayed and ready for use. The JFrame used in the server mode will instead be broken into two 
JPanels and two option buttons(start and exit). The two JPanels are a ServerInfoPanel class and the 
afore motioned UserEntryPanel. With regard to the server mode launch, the JFrame will not be removed 
but instead report current server status in the information panel (ServerInfoPanel).
 
3.2	MVC pattern

For both the server and client implementation I have used the MVC pattern. I chose the pattern as it 
allows for separation of responsibility with regard to the graphical user interface. The areas of 
the MVC pattern breakdown into the following three units:
	Model		- Holds all the state and application logic and sends notifications of state change.
	View		- Gives a presentation of the current state of the model. 
	Controller	- Takes the user input via the View and invokes and decides to invoked a change on 
				  the model.
In the case of both server and client I have created interfaces to represent the different models, 
views and controllers. On the client side the following interfaces exist:
	suncertify.ui.client.ClientView
	suncertify.ui.client.SubcontractorModel
	suncertify.ui.client.SubcontractorController
In the case of the model and the view they are both specific to the object the client side UI will 
work with, therefore I am using the word "Subcontractor" in both these interface names so it is 
clear to the reader what the principle of these interfaces are. However for the view, there was 
nothing specific required in the interface so I have decided to use a generic interface name 
(ClientView). The implementation class names are as follows:
	suncertify.ui.client.ClientWindow
	suncertify.ui.client.ClientModel
	suncertify.ui.client.ClientController
To allow for strong knowledge transfer for the user I have used the same type of naming convention 
with regard to the interfaces and implementation classes on the UI server side also (only difference 
is as opposed to "Subcontractor", I am modeling a "server state"):
	Interfaces
		suncertify.ui.server.ServerView
		suncertify.ui.server.ServerStateModel
		suncertify.ui.server.ServerStateController
	Implementation classes
		suncertify.ui.server.ServerWindow
		suncertify.ui.server.ServerModel
		suncertify.ui.server.ServerController
I regard the benefit of using the MVC pattern is to allow for easy changing of the presentation tier
with no impact on the other portions of the system - for example currently the presentation is a 
JFrame - but this could easily be changed to some other type of presentation with no ill effect on 
any other portion of the system as long as the new presentation allows the user the ability to 
interact with the model as was previously defined in the controller and model interfaces. Although 
the MVC pattern does require quite a bit of design time and can be considered too costly for a 
simple system, I believe it to be generally a good pattern to use as it allows for future 
improvements/changes to be easily facilitated and limited to the specific portion of the system 
subject to change.		
		
3.3	Business Service

I decided to use the supplied DB interface as my means of invoking the client-server requests. I 
used the Adapter pattern to allow for invocation of methods on the DB interface. I needed an adapter 
as the existing method API in the DB interface did not support remote invocation. Client can request
a DB instance to operate its use cases on via the suncertify.application.DAOFactory. This class will 
hand back a DB instance to the networked or standalone client (depending on the launch mode). This 
DAO (data access object) contains all the possible methods to allow for CRUD use cases to be 
executable. However to allow for safe interaction with the data layer, certain method ordering is 
required to guarantee successful use case execution. With this in mind I decided to use a service 
layer for all client model interaction and hide the DAO object below this service layer. Benefit of 
this approach is that the client model will operate on the suncertify.application.DBService who has 
a simple easy to understand API like for example bookSubcontractor. However inside the DBService 
implementation, the DAO (DB instance) will allow for locking, reading, updating and then finally 
unlocking the record, thus hiding the complex logic from the client model.


4.	Data Implementation
---------------------------

As required, the Data class provides implementation logic for the methods contained in the DB 
interface as was specified in the assignment. However, I have decided to introduce a new interface, 
DBOperations, to allow two extra methods which I felt would be useful for my desired implementation. 
The DBOperations interface adds just two extra methods currently:
	init (takes a parameter representing a .db file location)
	destroy
The "init" method is required to be performed before any CRUD methods supplied by the DB interface.
The reason for this is that because I chose a singleton pattern for the Data class and therefore I 
need to allow for the singleton class to have different states (i.e. initialized). The init method 
takes a pre-verified .db file as an argument (i.e. file exists and has an extension of .db). The 
init method will perform the following actions:
	1.	Instantiate a worker class called FileAccess which does all the access and manipulation of 
	the physical file that is our database. Having all the code here, instead of in the Data class, 
	supports the single responsibility principle and should allow for a much easier to maintain 
	class and personally I believe a cleaner design.
	2.	Requests the FileAccess class to get all records and store them in our cache data structure 
	to be used for all CRUD requests.
	3.	Instantiate an instance of LockManager which will be used to support safe access of multiple 
	network client launched applications with regard to concurrent requests to our single instance 
	of the server application.
	4.	Set the Data class flag of initialized to true so that CRUD requests can be processed on 
	demand.
The "destroy" method will reset the key elements of the Data class back to a pre initialized state. 
The following actions will be performed
	1.	If the class had been previously initialized (i.e. FileAccess successfully initialized), 
	then a request to flush the current cache out to the physical database file will be attempted.
	2.	The field variable representing the FileAccess instance is set to null.
	3.	The field variable representing the LockManager instance is set to null.
	4.	The cache is reset to an empty data structure.
	5.	Set the Data class flag of initialized to false so that CRUD requests will not  be processed 
	on request.
Both the "init" and "destory" methods are synchronized so as to protect the key use case of setting 
up or tearing down the Data class without fear for any concurrent CRUD requests coming in and 
resulting in corrupting the launched network clients making the CRUD request.
No synchronization is being used for any of the methods from the DB interface. If a CRUD use case is 
requested prior to initializing the Data class, an IllegalStateExeption will be thrown. I will use a 
ConcurrentSkipListMap keyed on the record entry, as read up from the .db file, with a Subcontractor 
object as the value object for the given record number key. I chose this type of data structure 
because its a scalable concurrent map that is sorted according to the ordering of its keys 
(Insertion, removal, update, and access operations safely execute concurrently by multiple threads). 
This was useful for two reasons:
	a)	I didn't want to have synchronized on the CRUD methods if possible. I have the LockManager 
	to handle the concurrency of multiple network clients and synchronizing on the methods would 
	only cause a second layer of multi-threaded request handling.
	b) ConcurrentSkipListMap supports ordering. This is an important feature because the assignment 
	specified the re-use of deleted records - Therefore the natural order of records read in and 
	manipulated during the runtime of the server application needs to be maintained when writing 
	back out to the database on request to "destroy".
The Data class "init" method may be called multiple times (i.e. when launched in server mode, for 
example, if the .db file fails to have the expected cookie value, as set out in the DatabaseSchema 
class, then the user will be allowed to retry to select the correct .db file. The "destroy" method 
is currently called on shutdown of the application via the GracefulShutdownHook class. The cache is 
wrote out to the file only on exit of the application. One future improvement could be to 
periodically save the manipulated cache so as to prevent any issue occurring where a long running 
server instance looses the delta between start and exit of the application. I decided not to 
implement the periodic saving of records as it was a remote scenario where the closing of the 
application would fail to be persisted to file.


5.	Locking
---------------------------

To support the CRUD (Create, Read, Update, Delete) use cases of the DB interface, while allowing for
concurrent modifications, a locking mechanism is required. I have separated out this locking from 
the data class implementation as I felt this was a separate responsibility to what the Data class 
would be tasked with. the suncertify.db.lock package contains two classes to handle the locking 
within this application:
	LockManager
		- Supports requests to lock a given record number. returns a cookie to the calling class if 
		  successful.
		- Supports requests to unlock a given record number if the cookie value from the calling 
		  class matches that of the locked record number.
		- Supports requests to check the validity of a cookie vale for a given record number.
	LockInformation
		- Class to contain a unique cookie value and the current state (i.e. locked/unlocked)
		- Supports requests to set locked, returning a cookie value.
		- Supports requests to set unlocked if the given cookie value is as expected.
		- Supports requests to get the current cookie value.
To ensure safe transaction handling, as can be seen from above class explanations, a "cookie" 
value is used to ensure that the originator who requested to lock a record is the only one allowed 
to perform the CRUD use cases on the record. Also, until the originator who locked the record, 
releases the lock, then no other caller can access the record. The LockManager uses a 
ConcurrentHashMap keyed on the record numbers and containing a LockInformation object. The 
LockManager will request the LockInfomration object to lock. The LockInformation class uses a 
ReentrantLock to control the concurrent requests that could be possible in the networked client 
mode. If the lock is not held by any user currently, it is locked and a new cookie value is 
generated and returned. If the lock is already held, the current user request waits on the Condition 
variable until it is signaled that the lock is available. Now the current user request can be tried 
again to get the lock, until it is successful. Currently the only CRUD use cases that require 
exclusive access (locking) are update and delete.


6.	Network
---------------------------

The application networking support is implemented via RMI.

Reasons for using RMI over Sockets:
	- Remote objects look and feel like local objects.
	- The complexities of network-aware objects are hidden from the application.
	- No need to design a protocol between the client and server.
	- Method calls are type safe in RMI (caught at compile time).

All classes required to support networking are in the suncertify.remote package. I used a RMI 
Factory pattern as this allows for each calling instance (networked client via the DAOFactory class) 
to have its own version of the DBRemote interface - thereby avoiding the issue of thread reuse. 

The DBRemote interface is identical to the DB interface except that it supports remote invocation 
(i.e. extends the java.rmi.Remote interface and all methods can throw a java.rmi.RemoteException). 
The use of the AdapterPattern allows for the client to operate requests on the DB interface but 
within the implementation to transform the DB API request to the matching API request in the 
DBRemote interface. Use of this pattern allows for the client interaction to be unaware of whether 
the request is on a remote or local instance of the data layer.

With regard to this application I believe the benefits of RMI outweighed the benefits of Sockets. 
Although Sockets can support large amounts of data sending without a lot of overhead, I feel that 
RMI suited this application better. Data being sent will not be of a level that would warrant a 
socket implementation. Also ease of interaction with the RMI objects felt like a cleaner design 
approach.

With regard to the client server architecture, a best effort is made to validate the entered text 
which represents the requested "Server Address" as part of the networked client launch. Text entered
can be a hostname or a literal IP address. entry of either format will be validated to ensure a IPv4
or IPv6 address is fully qualified. However the verification of the presence of an RMI Registry on 
the validated IP address may take some time to complete. For the sake of assuming that data entry 
will not be intentionally incorrect, I have decided not to introduce any further checking (i.e. 
verification that the server address is contactable) so as to balance the performance of the 
application on startup with the need to validate the user entry.

===========================